@using System.Reflection
@typeparam TItems

<div class="-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 pr-10 lg:px-8">
    <div class="align-middle inline-block min-w-full shadow overflow-hidden bg-white dark:bg-darker shadow-dashboard px-8 pt-3 rounded-bl-lg rounded-br-lg">
        <div class="flex justify-between">
            <div class="inline-flex border rounded w-7/12 px-2 lg:px-6 h-12 bg-transparent">
                <div class="flex flex-wrap items-stretch w-full h-full mb-6 relative">
                    <div class="flex">
                        <span class="flex items-center leading-normal bg-transparent rounded rounded-r-none border border-r-0
                                  border-none lg:px-3 py-2 whitespace-no-wrap text-grey-dark text-sm">
                            <svg width="18" height="18" class="w-4 lg:w-auto" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M8.11086 15.2217C12.0381 15.2217 15.2217 12.0381 15.2217 8.11086C15.2217 4.18364 12.0381 1 8.11086 1C4.18364 1 1 4.18364 1 8.11086C1 12.0381 4.18364 15.2217 8.11086 15.2217Z" stroke="#455A64" stroke-linecap="round" stroke-linejoin="round" />
                                <path d="M16.9993 16.9993L13.1328 13.1328" stroke="#455A64" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                        </span>
                    </div>
                    <input type="text" class="flex-shrink flex-grow flex-auto leading-normal tracking-wide w-px
                               flex-1 border border-none border-l-0 rounded rounded-l-none px-3 relative dark:bg-dark
                               focus:outline-none text-xxs lg:text-xs lg:text-base text-gray-500 font-thin"
                           placeholder="Search">
                </div>
            </div>
            <div class="inline-flex">
                <label class="mr-2 flex items-center md:text-sm text-xs text-black dark:text-light font-semibold">Page Size:</label>
                <select class="py-1 px-2 rounded-lg border-2 border-primary focus:outline-none focus:ring-2
                    focus:ring-primary bg-white dark:bg-dark focus:border-transparent" @onchange="@PageSizeChanged">
                    <option value="5" selected="@(_pageSize==5)">5</option>
                    <option value="10" selected="@(_pageSize==10)">10</option>
                    <option value="25" selected="@(_pageSize==25)">25</option>
                    <option value="50" selected="@(_pageSize==50)">50</option>
                    <option value="100" selected="@(_pageSize==100)">100</option>
                </select>
            </div>
        </div>
        <table class="min-w-full mt-1">
            <thead>
                <tr>
                    @if (EnableCheckBox)
                    {
                        <th class="text-center px-1 py-3 border-b-2 border-gray-500 text-left text-xs leading-4
                                text-blue-500 dark:text-light tracking-wider">Select</th>
                    }
                    @foreach (var column in HeaderColumns)
                    {
                        if (column.Invisible)
                        {
                            continue;
                        }
                        <th class="text-center px-1 py-3 border-b-2 border-gray-500 text-left text-sm leading-4
                                text-blue-500 dark:text-light tracking-wider">
                            @(string.IsNullOrEmpty(column.DisplayName)?column.ParameterName:column.DisplayName)
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-dark">
                @{
                    bool isEven = false;
                    if (RowItems != null)
                    {
                        foreach (var item in RowItems.Skip((_currentPageNumber - 1) * _pageSize).Take(_pageSize))
                        {
                            <tr class="@(isEven ? "bg-gray-100 dark:bg-darker" : "")">
                                @if (EnableCheckBox)
                                {
                                    <td class="text-center px-1 py-2 whitespace-no-wrap border-b border-gray-500">
                                        <input type="checkbox"
                                               checked="@item.Checked" @onclick="@(() => { item.Checked = !item.Checked;})"
                                               class="mr-1 focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded">
                                    </td>
                                }
                                @foreach (var column in item.ColumnItems)
                                {
                                    if (column.Invisible)
                                    {
                                        continue;
                                    }
                                    <td class="text-center px-1 py-2 whitespace-no-wrap border-b border-gray-500">
                                        @if (column.ActionButtons.Any())
                                        {
                                            @foreach (var action in column.ActionButtons)
                                            {
                                                <button title="@action.Tooltip" @onclick="@(()=>action.Event.Invoke(item))"
                                                        class="mr-1 px-2 py-1 text-sm text-white rounded-md bg-primary hover:bg-primary-dark
                                                    focus:outline-none focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">
                                                    @if (!string.IsNullOrEmpty(action.DisplayName))
                                                    {
                                                        @action.DisplayName
                                                    }
                                                    @if (action.IconName != null)
                                                    {
                                                        <IconSvg Svg="action.IconName.Value"></IconSvg>
                                                    }
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <div class="text-sm leading-5 text-gray-800 dark:text-light">@column.Value</div>
                                        }
                                    </td>
                                }
                            </tr>
                            isEven = !isEven;
                        }
                    }
                }
            </tbody>
        </table>
        <div class="sm:flex-1 sm:flex sm:items-center sm:justify-between mt-4 work-sans">
            <div>
                <p class="text-sm leading-5 text-blue-700 dark:text-light">
                    Showing
                    <span class="font-medium">@((_currentPageNumber - 1) * _pageSize + 1)</span>
                    to
                    <span class="font-medium">
                        @if (_currentPageNumber * _pageSize > RowItems?.Count)
                        {
                            @((_currentPageNumber-1)* _pageSize+_lastPageSize)
                        }
                        else
                        {
                            @(_currentPageNumber * _pageSize)
                        }
                    </span>
                    of
                    <span class="font-medium">@(RowItems?.Count??0)</span>
                    results
                </p>
            </div>
            <div>
                <nav class="relative z-0 inline-flex shadow-sm m-2 bg-white dark:bg-dark text-blue-700 dark:text-light">
                    @if (_currentPageNumber > 1)
                    {
                        <button class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 text-sm
                       leading-5 font-medium hover:text-gray-400 focus:z-10 focus:outline-none focus:border-blue-300
                       focus:shadow-outline-blue active:bg-gray-100 active:text-gray-500 transition ease-in-out duration-150"
                                aria-label="Previous" @onclick="@(() => { _currentPageNumber--;})">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    }
                    @if (_pageCount > 1)
                    {
                        @for (int pageNumber = 1; pageNumber <= _pageCount; pageNumber++)
                        {
                            var localPageNum = pageNumber;
                            <button class="-ml-px relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm
                       leading-5 font-medium focus:z-10 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue
                       active:bg-tertiary active:text-gray-700 transition ease-in-out duration-150 hover:bg-tertiary"
                                    @onclick="@(() => {_currentPageNumber = localPageNum;})">
                                @localPageNum
                            </button>
                        }
                    }
                    @if (_currentPageNumber < _pageCount)
                    {
                        <button class="-ml-px relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300
                       text-sm leading-5 font-medium hover:text-gray-400 focus:z-10 focus:outline-none focus:border-blue-300
                       focus:shadow-outline-blue active:bg-gray-100 active:text-gray-500 transition ease-in-out duration-150"
                                aria-label="Next" @onclick="@(() => { _currentPageNumber++;})">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    }
                </nav>
            </div>
        </div>
    </div>
</div>

@code
{
    private IEnumerable<TItems> _dataSource = new HashSet<TItems>();
    [Parameter]
    public IEnumerable<TItems> DataSource
    {
        get => _dataSource ?? new HashSet<TItems>();
        set
        {
            if (RowItems.Any() && Equals(DataSource, value) && RowItems.Count == value.Count()) return;
            _dataSource = value ?? new HashSet<TItems>();
            if (HeaderColumns == null)
                throw new Exception("'Columns' parameter does not allow null, Provide 'Columns' parameter before 'DataSource'.");
            InitDataSource(_dataSource);
        }
    }

    [Parameter]
    public IEnumerable<ColumnItem> HeaderColumns { get; set; }

    [Parameter]
    public bool EnableCheckBox { get; set; }

    [Parameter]
    public IList<RowItem> RowItems { get; set; } = new List<RowItem>();

    private byte _pageSize = 5;
    private int _pageCount;
    private int _currentPageNumber = 1;
    private int _lastPageSize;

    public void InitDataSource(IEnumerable<TItems> items)
    {
        if (items == null) return;
        RowItems.Clear();
        foreach (var item in items)
        {
            var columnItems = new List<ColumnItem>();
            foreach (var column in HeaderColumns)
            {
                if (column.ParameterName == null)
                    throw new NullReferenceException("Parameter 'Name' for every item in HeaderColumns typeof(List<ColumnItem>) must define.");
                var columnItem = new ColumnItem
                {
                    ParameterName = column.ParameterName,
                    DisplayName = column.DisplayName,
                    Width = column.Width,
                    Height = column.Height,
                    Invisible = column.Invisible,
                    ActionButtons = column.ActionButtons
                };
                if (!column.ActionButtons.Any())
                {
                    columnItem.Value = GetValue(item, column.ParameterName);
                }
                columnItems.Add(columnItem);
            }
            RowItems.Add(new RowItem
            {
                ColumnItems = columnItems,
                BaseObject = item
            });
        }
        SetupPagination();
    }

    private string GetValue(object currentObject, string pathName)
    {
        if (pathName.Contains("."))
        {
            string[] fieldNames = pathName.Split(".");
            foreach (string fieldName in fieldNames)
            {
                var property = currentObject.GetType().GetProperty(fieldName);
                if (property != null)
                {
                    currentObject = property.GetValue(currentObject, null);
                }
                else
                {
                    throw new NullReferenceException(pathName + " Column not exist in this list");
                }
            }
            return currentObject.ToString();
        }
        var col = currentObject.GetType().GetProperty(pathName);
        if (col == null)
            throw new NullReferenceException(pathName + " Column not exist in this list");
        return col.GetValue(currentObject, null)?.ToString() ?? string.Empty;
    }

    #region Paginations
    private void PageSizeChanged(ChangeEventArgs e)
    {
        _pageSize = e.Value.ToByte();
        SetupPagination();
    }

    private void SetupPagination()
    {
        _pageCount = RowItems.Count / _pageSize;
        _lastPageSize = RowItems.Count % _pageSize;
        if (_lastPageSize > 0)
            _pageCount++;
    }
    #endregion

    public IEnumerable<RowItem> GetSelectedRowItems() => RowItems.Where(i => i.Checked);
}
