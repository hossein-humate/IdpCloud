@page "/softwarelist"
@using Humate.WASM.Common
@using Humate.WASM.Dtos.ApiModel
@using Humate.WASM.Dtos.ApiModel.Software
@using Humate.WASM.Dtos.ApiModel.Software.Response

<!-- Content header -->
<div class="flex items-center justify-between px-4 py-4 border-b lg:py-6 dark:border-primary-darker">
    <h1 class="text-2xl font-semibold">Project List</h1>
    <a href="/softwarecreate" class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Create New</a>
</div>

<!-- Content -->
<div class="m-2">
    <ModalDialog HeaderText="Confirm Action" ContentText="Are you sure you want to delete this project?"
                 ConfirmText="Yes!" CancelText="No" @ref="_confirmDeleteDialog"
                 OnConfirmCallback="OnConfirmDeleteAsync"></ModalDialog>

    <DataGrid @ref="@_dataGridSoftwares"
              HeaderColumns="@(new List<ColumnItem>
                         {
                             new ColumnItem
                             {
                                 ParameterName = "SoftwareId",
                                 Invisible = true
                             },
                             new ColumnItem
                             {
                                 ParameterName = "Name"
                             },
                             new ColumnItem
                             {
                                 ParameterName = "Brand"
                             },
                             new ColumnItem
                             {
                                 ParameterName = "KeyExpire",
                                 DisplayName = "Key Expire Date"
                             },
                             new ColumnItem
                             {
                                 ParameterName = "Status"
                             },
                             new ColumnItem
                             {
                                 ParameterName = "Actions",
                                 ActionButtons = new List<ActionButton>
                                 {
                                     new ActionButton
                                     {
                                         IconName = SvgName.Edit,
                                         Tooltip = "Update Current Row",
                                         Event = OnUpdateRow
                                     },
                                     new ActionButton
                                     {
                                         IconName = SvgName.Delete,
                                         Tooltip = "Delete Current Row",
                                         Event = OnDeleteRow
                                     }
                                 }
                             }
                         })"
              DataSource="@_softwares"
              EnableCheckBox="true"
              TItems="SoftwareApiModel"></DataGrid>
</div>

@code {
    private ModalDialog _confirmDeleteDialog;
    private DataGrid<SoftwareApiModel> _dataGridSoftwares = new DataGrid<SoftwareApiModel>();
    private IList<SoftwareApiModel> _softwares = new List<SoftwareApiModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ApiManager.GetAsync<GetAllResponse>(GlobalVariable.ApiBaseAddress,
            "/api/identity/software/GetAll",
                await LocalStorage.GetItemAsStringAsync("Token"));
            if (result.ResultCode != 0)
            {
                Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
                return;
            }
            _softwares = result.Softwares.ToList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnConfirmDeleteAsync(object input)
    {
        var software = (input as RowItem)?.BaseObject as SoftwareApiModel;
        if (software == null)
        {
            Toaster.ShowToast(ToastLevel.Error, "Cannot get Software information.", "Client Error");
            return;
        }
        Console.WriteLine(software.Name);
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var result = await ApiManager.DeleteAsync<BaseResponse>(GlobalVariable.ApiBaseAddress,
        $"/api/identity/software/Delete/{software.SoftwareId}", token);
        if (result.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
            return;
        }
        _softwares.Remove(software);
        Toaster.ShowToast(ToastLevel.Info,
            "Deleting Project successfully completed.", "Delete Project");
        Navigator.NavigateTo("softwarelist", true);
    }

    private void OnUpdateRow(RowItem rowItem)
    {
        var software = rowItem.BaseObject as SoftwareApiModel;
        Navigator.NavigateTo($"softwareedit/{software?.SoftwareId}");
    }

    private void OnDeleteRow(RowItem rowItem)
    {
        _confirmDeleteDialog.Show(rowItem);
    }

    private void OnActiveSessions(RowItem rowItem)
    {
        var software = rowItem.BaseObject as SoftwareApiModel;
        Navigator.NavigateTo($"softwaresession/{software?.SoftwareId}");
    }
}
