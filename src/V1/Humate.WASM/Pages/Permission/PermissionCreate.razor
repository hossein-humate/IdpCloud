@page "/permissioncreate/{parentId}"
@using Humate.WASM.Common
@using Humate.WASM.Dtos.ApiModel
@using Humate.WASM.Dtos.ApiModel.Permission
@using Humate.WASM.Dtos.ApiModel.Permission.Request
@using Humate.WASM.Dtos.ApiModel.Permission.Response

<!-- Content header -->
<div class="flex items-center justify-between px-4 py-4 border-b lg:py-6 dark:border-primary-darker">
    <h1 class="text-2xl font-semibold">Create New Permission in @_parent.Name Node</h1>
    <a href="/permissionlist" class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Back To All Permissions</a>
</div>

<!-- Content -->
<div class="m-2">
    <!-- Table -->
    <div class="-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 pr-10 lg:px-8">
        <div class="align-middle rounded-tl-lg rounded-tr-lg inline-block w-full py-4 overflow-hidden bg-white dark:bg-darker shadow-lg px-12">
            <div class="flex justify-between">
                <h1>Fill this information about your Permission down here.</h1>
            </div>
        </div>
        <div class="align-middle inline-block min-w-full shadow overflow-hidden bg-white dark:bg-darker shadow-dashboard px-8 pt-3 rounded-bl-lg rounded-br-lg">
            <div class="h-screen items-center justify-center overflow-y-auto">
                <div class="grid bg-white dark:bg-darker rounded-lg w-full">
                    @if (!string.IsNullOrEmpty(_createResultMessage))
                    {
                        <div class="flex justify-center">
                            <div class="flex">
                                <label class="text-sm font-semibold text-red-500">@_createResultMessage</label>
                            </div>
                        </div>
                    }
                <div class="grid grid-cols-1 md:grid-cols-2 gap-5 md:gap-8 mt-5 mx-7">
                    <div class="grid grid-cols-1 ">
                        <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Name</label>
                        <input class="py-2 px-3 rounded-lg text-black border-2 border-primary mt-1 focus:outline-none
                               focus:ring-2 focus:ring-primary focus:border-transparent" type="text"
                               placeholder="What's this Permission name? e.g. GetAllUser!" @bind-value="_createRequest.Name" />
                    </div>
                    <div class="grid grid-cols-1">
                        <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Action</label>
                        <input class="py-2 px-3 rounded-lg text-black border-2 border-primary mt-1 focus:outline-none
                               focus:ring-2 focus:ring-primary focus:border-transparent" type="text"
                               placeholder="Path Url,Method Name & anything can call it an action in your project?" @bind-value="_createRequest.Action" />
                    </div>
                </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-5 md:gap-8 mt-5 mx-7">
                        <div class="grid grid-cols-1 ">
                            <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Parent Node</label>
                            <input class="py-2 px-3 rounded-lg text-black border-2 border-primary mt-1 focus:outline-none
                               focus:ring-2 focus:ring-primary focus:border-transparent" type="text" disabled="disabled"
                                   @bind="_parent.Name" />
                        </div>
                        <div class="grid grid-cols-1">
                            <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Scope</label>
                            <input class="py-2 px-3 rounded-lg text-black border-2 border-primary mt-1 focus:outline-none
                               focus:ring-2 focus:ring-primary focus:border-transparent" type="text"
                                   placeholder="What's this Scope? e.g. read.user!" @bind-value="_createRequest.Scope" />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-5 md:gap-8 mt-5 mx-7">
                        <div class="grid grid-cols-1 ">
                            <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Type</label>
                            <select class="py-2 px-3 rounded-lg border-2 border-primary mt-1 focus:outline-none focus:ring-2
                    focus:ring-primary bg-white dark:bg-dark focus:border-transparent" @bind="_createRequest.Type">
                                @foreach (var type in Enum.GetNames(typeof(PermissionType)))
                                {
                                    if (type == "Link")
                                    {
                                        <option value="@Enum.Parse(typeof(PermissionType),type)" selected="selected">@type</option>
                                    }
                                    else
                                    {
                                        <option value="@Enum.Parse(typeof(PermissionType),type)">@type</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="grid grid-cols-1">
                            <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Sort Order</label>
                            <input class="py-2 px-3 rounded-lg text-black border-2 border-primary mt-1 focus:outline-none
                               focus:ring-2 focus:ring-primary focus:border-transparent" type="number"
                                   placeholder="Number of order in level" @bind-value="_createRequest.SortOrder" />
                        </div>
                        <div class="grid grid-cols-1">
                            <label class="flex items-center relative w-max cursor-pointer select-none">
                                <span class="text-lg font-bold mr-3">Is Public:</span>
                                <input type="checkbox" @bind="_createRequest.Public" class="appearance-none transition-colors cursor-pointer w-14 h-7
                                       rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-primary
                                       focus:ring-blue-500 bg-red-500" />
                                <span class="absolute font-medium text-xs right-1 text-white"> No </span>
                                <span class="absolute font-medium text-xs right-8 text-white">Yes</span>
                                <span class="w-8 h-8 right-6 shadow-lg absolute rounded-full transform transition-transform bg-gray-200" ></span>
                            </label>
                        </div>
                    </div>

                    <div class="flex items-center justify-center md:gap-8 gap-4 pt-5 pb-5">
                        <a href="/permissionlist" class="px-4 py-2 text-sm text-white rounded-md bg-danger hover:bg-danger-dark focus:outline-none
           focus:ring focus:ring-danger focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Cancel</a>
                        <button @onclick="CreateAsync" type="button"
                                class="inline-flex justify-center px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">
                            @if (_loading)
                            {
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            }
                            Create
                        </button>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ParentId { get; set; }

    private bool _loading = false;
    private string _createResultMessage = "";
    private readonly CreateRequest _createRequest = new CreateRequest();
    private PermissionApiModel _parent = new PermissionApiModel();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrEmpty(ParentId))
            {
                Navigator.NavigateTo("permissionList");
                return;
            }
            _createResultMessage = "";
            var token = await LocalStorage.GetItemAsStringAsync("Token");
            var result = await ApiManager.GetAsync<GetByIdResponse>(GlobalVariable.ApiBaseAddress,
                $"/api/identity/permission/GetById/{ParentId}",  token: token);
            if (result.ResultCode != 0)
            {
                Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
                return;
            }
            _parent = result.Permission;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CreateAsync()
    {
        try
        {
            if (_loading) return;
            _loading = true;
            if (string.IsNullOrEmpty(_createRequest.Name) || string.IsNullOrEmpty(_createRequest.Action))
            {
                Toaster.ShowToast(ToastLevel.Error, "Enter your permission 'Name' and 'Action'.", "Validation Error");
                _loading = false;
                return;
            }
            _createResultMessage = "";
            var token = await LocalStorage.GetItemAsStringAsync("Token");
            _createRequest.SoftwareId = (await LocalStorage.GetItemAsStringAsync("CurrentProject")).ToGuid();
            _createRequest.ParentId = ParentId.ToGuid();
            var result = await ApiManager.PostAsync<BaseResponse, CreateRequest>(GlobalVariable.ApiBaseAddress,
                "/api/identity/permission/create", _createRequest, token: token);
            if (result.ResultCode != 0)
            {
                Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
                _loading = false;
                return;
            }
            Toaster.ShowToast(ToastLevel.Info,
                "Create Permission successfully completed.", "Create Permission");
            Navigator.NavigateTo("permissionlist");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message + "\n" + ex.StackTrace);
        }
    }
}
