@page "/permissionlist"
@using AutoMapper.Internal
@using Humate.WASM.Dtos.ApiModel
@using Humate.WASM.Dtos.ApiModel.Permission.Response

<!-- Content header -->
<div class="flex items-center justify-between px-4 py-4 border-b lg:py-6 dark:border-primary-darker">
    <h1 class="text-2xl font-semibold">Group/Role List</h1>
    <a href="/softwareList" class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Back To All Projects</a>
</div>

<!-- Content -->
<div class="m-2">
    <ModalDialog HeaderText="Confirm Action" ContentText="Are you sure you want to delete this Permission node?"
                 ConfirmText="Yes!" CancelText="No" @ref="_confirmDeleteDialog"
                 OnConfirmCallback="OnConfirmDeleteAsync"></ModalDialog>
    <!-- Table -->
    <div class="-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 pr-10 lg:px-8">
        <div class="flex inline-flex justify-between p-2">
            @if (_selectedNode != null)
            {
                <button class="m-2 px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark" @onclick="CreateNew">
                    Create New
                </button>
                @if (_selectedNode.ParentId != Guid.Empty.ToString())
                {
                    <button class="m-2 px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark" @onclick="UpdateNode">
                        Update
                    </button>
                    @if (!_selectedNode.Childrens.Any())
                    {
                        <button title="Remove this node" class="m-2 px-4 py-2 text-sm text-white rounded-md bg-danger hover:bg-danger-dark
                                focus:outline-none focus:ring focus:ring-danger focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark"
                                @onclick="() => _confirmDeleteDialog.Show(_selectedNode)" @onclick:preventDefault="true">
                            Delete
                        </button>
                    }
                }
            }
        </div>
        <div class="align-middle rounded-tl-lg rounded-tr-lg inline-block w-full py-4 overflow-hidden bg-white dark:bg-dark shadow-lg px-12">
            <div class="flex justify-between">
                <div class="inline-flex border rounded w-7/12 px-2 lg:px-6 h-12 bg-transparent">
                    <div class="flex flex-wrap items-stretch w-full h-full mb-6 relative">
                        <div class="flex">
                            <span class="flex items-center leading-normal bg-transparent rounded rounded-r-none border border-r-0
                                  border-none lg:px-3 py-2 whitespace-no-wrap text-grey-dark text-sm">
                                <svg width="18" height="18" class="w-4 lg:w-auto" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M8.11086 15.2217C12.0381 15.2217 15.2217 12.0381 15.2217 8.11086C15.2217 4.18364 12.0381 1 8.11086 1C4.18364 1 1 4.18364 1 8.11086C1 12.0381 4.18364 15.2217 8.11086 15.2217Z" stroke="#455A64" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M16.9993 16.9993L13.1328 13.1328" stroke="#455A64" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </span>
                        </div>
                        <input type="text" class="flex-shrink flex-grow flex-auto leading-normal tracking-wide w-px
                               flex-1 border border-none border-l-0 rounded rounded-l-none px-3 relative dark:bg-dark
                               focus:outline-none text-xxs lg:text-xs lg:text-base text-gray-500 font-thin"
                               placeholder="Search">
                    </div>
                </div>
            </div>
        </div>
        <div class="align-middle inline-block min-w-full shadow overflow-hidden bg-white dark:bg-darker shadow-dashboard px-8 pt-3 rounded-bl-lg rounded-br-lg">
            @if (_permissions.Any())
            {
                <div class="w-7/12">
                    <TreeView OnSelectedItemChanged="item=>OnTreeViewSelectedChanged(item)"
                              DataSource="@(_permissions)"
                              RootParentId="@(Guid.Empty.ToString())"></TreeView>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ModalDialog _confirmDeleteDialog;
    private IList<NodeItem> _permissions = new List<NodeItem>();
    private NodeItem _selectedNode;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ServiceHelper.ClearStack();
            ServiceHelper.CurrentProjectChangedAsync += LoadContentAsync;
            await LoadContentAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadContentAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var result = await ApiManager.GetAsync<GetBySoftwareIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/permission/GetBySoftwareId/{await LocalStorage.GetItemAsStringAsync("CurrentProject")}", token);
        if (result.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
            return;
        }
        _permissions = Mapper.Map<IList<NodeItem>>(result.Permissions);
        _permissions.ForAll(item =>
        {
            item.Expanded = true;
        });
        Toaster.ShowToast(ToastLevel.Info,
            "Loading all Permissions for selected project successfully completed.", "Select Project");
        StateHasChanged();
    }

    private async Task OnConfirmDeleteAsync(object input)
    {
        var node = input as NodeItem;
        if (node == null)
        {
            Toaster.ShowToast(ToastLevel.Error, "Cannot get Node information.", "Client Error");
            return;
        }
        Console.WriteLine(node.Text);
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var result = await ApiManager.DeleteAsync<BaseResponse>(GlobalVariable.ApiBaseAddress,
        $"/api/identity/permission/Delete/{node.Id}", token);
        if (result.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
            return;
        }
        OnTreeViewSelectedChanged(_permissions.FirstOrDefault(n => n.Id == node.ParentId));
        _permissions.Remove(node);
        Toaster.ShowToast(ToastLevel.Info,
            "Deleting permission successfully completed.", "Delete Permission");
    }

    private void OnTreeViewSelectedChanged(NodeItem item)
    {
        _selectedNode = item;
    }

    private void CreateNew()
    {
        Navigator.NavigateTo($"permissionCreate/{_selectedNode.Id}");
    }

    private void UpdateNode()
    {
        Navigator.NavigateTo($"permissionEdit/{_selectedNode.Id}");
    }
}