@page "/assignrolepermission"
@using AutoMapper.Internal
@using Humate.WASM.Dtos.ApiModel
@using Humate.WASM.Dtos.ApiModel.Permission.Response
@using Humate.WASM.Dtos.ApiModel.Role
@using Humate.WASM.Dtos.ApiModel.RolePermission.Request
@using Humate.WASM.Dtos.ApiModel.RolePermission.Response
<!-- Content header -->
<div class="flex items-center justify-between px-4 py-4 border-b lg:py-6 dark:border-primary-darker">
    <h1 class="text-2xl font-semibold">Group/Role List</h1>
    <a href="/softwareList" class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Back To All Projects</a>
</div>

<!-- Content -->
<div class="m-2">
    <!-- Table -->
    <div class="-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 pr-10 lg:px-8">
        @if (!string.IsNullOrEmpty(_apiMessage))
        {
            <label class="text-sm font-semibold text-red-500">@_apiMessage</label>
        }
        <div class="align-middle rounded-tl-lg rounded-tr-lg inline-block w-full py-4 overflow-hidden bg-white dark:bg-dark shadow-lg px-12">
            <div class="flex justify-between">
                <div class="inline-flex border rounded w-7/12 px-2 lg:px-6 h-12 bg-transparent">
                    <div class="flex flex-wrap items-stretch w-full h-full mb-6 relative">
                        <div class="flex">
                            <span class="flex items-center leading-normal bg-transparent rounded rounded-r-none border border-r-0
                                  border-none lg:px-3 py-2 whitespace-no-wrap text-grey-dark text-sm">
                                <svg width="18" height="18" class="w-4 lg:w-auto" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M8.11086 15.2217C12.0381 15.2217 15.2217 12.0381 15.2217 8.11086C15.2217 4.18364 12.0381 1 8.11086 1C4.18364 1 1 4.18364 1 8.11086C1 12.0381 4.18364 15.2217 8.11086 15.2217Z" stroke="#455A64" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M16.9993 16.9993L13.1328 13.1328" stroke="#455A64" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                            </span>
                        </div>
                        <input type="text" class="flex-shrink flex-grow flex-auto leading-normal tracking-wide w-px
                               flex-1 border border-none border-l-0 rounded rounded-l-none px-3 relative dark:bg-dark
                               focus:outline-none text-xxs lg:text-xs lg:text-base text-gray-500 font-thin"
                               placeholder="Search">
                    </div>
                </div>
            </div>
        </div>
        <div class="align-middle inline-block min-w-full shadow overflow-hidden bg-white dark:bg-darker shadow-dashboard px-8 pt-3 rounded-bl-lg rounded-br-lg">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-5 md:gap-8 mt-5 mx-7">
                <div class="grid grid-cols-1 ">
                    <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Type</label>
                    <select class="py-2 px-3 rounded-lg border-2 border-primary mt-1 focus:outline-none focus:ring-2
                    focus:ring-primary bg-white dark:bg-dark focus:border-transparent" @onchange="GetRolePermissions">
                        @foreach (var role in _roles)
                        {
                            if (role.IsDefault)
                            {
                                <option value="@role.RoleId" selected="selected">@role.Name</option>
                            }
                            else
                            {
                                <option value="@role.RoleId">@role.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            @if (_permissions.Any())
            {
                <div class="w-7/12">
                    <TreeView @ref="_treeViewPermissions"
                              DataSource="@(_permissions)"
                              RootParentId="@(Guid.Empty.ToString())"></TreeView>
                </div>
            }
            <div class="flex items-center justify-center md:gap-8 gap-4 pt-5 pb-5">
                <button @onclick="SaveAsync" type="button"
                        class="inline-flex justify-center px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">
                    @if (_loading)
                    {
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    }
                    Save
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    private bool _loading = false;
    private string _apiMessage = "";
    private IList<NodeItem> _permissions = new List<NodeItem>();
    private IList<RoleApiModel> _roles = new List<RoleApiModel>();
    private TreeView _treeViewPermissions;
    private CreateRequest _createRequest = new CreateRequest();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ServiceHelper.ClearStack();
            ServiceHelper.CurrentProjectChangedAsync += LoadContentAsync;
            await LoadContentAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadContentAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var roleResult = await ApiManager.GetAsync<Dtos.ApiModel.Role.Response.GetBySoftwareIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/role/GetBySoftwareId/{await LocalStorage.GetItemAsStringAsync("CurrentProject")}", token);
        if (roleResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, roleResult.Message, "Server Error");
            return;
        }
        _roles = roleResult.Roles.ToList();
        _createRequest.RoleId = _roles.FirstOrDefault(r => r.IsDefault).RoleId;
        var rolePermissionResult = await ApiManager.GetAsync<GetByRoleIdResponse>(GlobalVariable.ApiBaseAddress,
        $"/api/identity/rolePermission/GetByRoleId/{_createRequest.RoleId}", token);
        if (rolePermissionResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, rolePermissionResult.Message, "Server Error");
            return;
        }

        var permissionResult = await ApiManager.GetAsync<GetBySoftwareIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/permission/GetBySoftwareId/{await LocalStorage.GetItemAsStringAsync("CurrentProject")}", token);
        if (permissionResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, permissionResult.Message, "Server Error");
            return;
        }
        _permissions = Mapper.Map<IList<NodeItem>>(permissionResult.Permissions);
        _permissions.ForAll(item =>
        {
            item.Checked = rolePermissionResult.Permissions.Any(rp => rp.PermissionId == item.Id.ToGuid());
            item.ShowCheckBox = item.Expanded = true;
        });
        Toaster.ShowToast(ToastLevel.Info,
            "Loading all data Roles/Permissions for selected project successfully completed.", "Select Project");
        StateHasChanged();
    }

    private async Task SaveAsync()
    {
        if (_loading) return;
        _loading = true;
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var roleResult = await ApiManager.PostAsync<BaseResponse, CreateRequest>(GlobalVariable.ApiBaseAddress,
            "/api/identity/rolePermission/Create", new CreateRequest
            {
                RoleId = _createRequest.RoleId,
                PermissionIds = _treeViewPermissions.GetSelectedItems().Select(p => p.Id.ToGuid())
            }, token);
        if (roleResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, roleResult.Message, "Server Error");
            _loading = false;
            return;
        }
        Toaster.ShowToast(ToastLevel.Success,
            "Role Permissions Assignment Successfully saved.", "Assign Role To Permission");
        _loading = false;
    }

    private async void GetRolePermissions(ChangeEventArgs eventArgs)
    {
        _createRequest.RoleId = eventArgs.Value.ToGuid();
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var rolePermissionResult = await ApiManager.GetAsync<GetByRoleIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/rolePermission/GetByRoleId/{_createRequest.RoleId}", token);
        if (rolePermissionResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, rolePermissionResult.Message, "Server Error");
            return;
        }
        _permissions.ForAll(item =>
        {
            item.Checked = rolePermissionResult.Permissions.Any(rp => rp.PermissionId == item.Id.ToGuid());
            item.ShowCheckBox = item.Expanded = true;
        });

        Toaster.ShowToast(ToastLevel.Info,
            "Loading all assigned Permissions to the selected Role successfully completed.", "Select Role");
        StateHasChanged();
    }
}
