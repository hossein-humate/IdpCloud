@page "/useredit/{userId}"
@using Humate.WASM.Dtos.ApiModel.User.Request
@using Humate.WASM.Dtos.ApiModel
@using Humate.WASM.Dtos.ApiModel.User.Response

<!-- Content header -->
<div class="flex items-center justify-between px-4 py-4 border-b lg:py-6 dark:border-primary-darker">
    <h1 class="text-2xl font-semibold">Edit @_updateRequest.Username User</h1>
    <a href="/userlist" class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Back To All Users</a>
</div>

<!-- Content -->
<div class="m-2">
    <!-- Table -->
    <div class="-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 pr-10 lg:px-8">
        <div class="align-middle rounded-tl-lg rounded-tr-lg inline-block w-full py-4 overflow-hidden bg-white dark:bg-darker shadow-lg px-12">
            <div class="flex justify-between">
                <h1>Fill this basic information about your New User down here.</h1>
            </div>
        </div>
        <div class="align-middle inline-block min-w-full shadow overflow-hidden bg-white dark:bg-darker shadow-dashboard px-8 pt-3 rounded-bl-lg rounded-br-lg">
            <div class="h-screen items-center justify-center overflow-y-auto">
                <div class="grid bg-white dark:bg-darker rounded-lg w-full">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-5 md:gap-8 mt-5 mx-7">
                        <div class="grid grid-cols-1 ">

                            <label class="md:text-sm text-xs text-black dark:text-light font-semibold">Project Name</label>
                            <input class="py-2 px-3 rounded-lg text-black border-2 border-primary mt-1 focus:outline-none
                               focus:ring-2 focus:ring-primary focus:border-transparent" type="text"
                                   placeholder="What's this User name? e.g. admin!" @bind-value="_updateRequest.Username" />
                        </div>
                        <div class="grid grid-cols-1">
                            <label class="flex items-center relative w-max cursor-pointer select-none">
                                <span class="text-lg font-bold mr-3">Is Default:</span>
                                <input type="checkbox" @bind="_updateRequest.Status" class="appearance-none transition-colors cursor-pointer w-14 h-7
                                       rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-primary
                                       focus:ring-blue-500 bg-red-500" />
                                <span class="absolute font-medium text-xs right-1 text-white"> No </span>
                                <span class="absolute font-medium text-xs right-8 text-white">Yes</span>
                                <span class="w-8 h-8 right-6 shadow-lg absolute rounded-full transform transition-transform bg-gray-200" />
                            </label>
                        </div>
                    </div>

                    <div class="flex items-center justify-center md:gap-8 gap-4 pt-5 pb-5">
                        <a href="/userlist" class="px-4 py-2 text-sm text-white rounded-md bg-danger hover:bg-danger-dark focus:outline-none
           focus:ring focus:ring-danger focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Cancel</a>
                        <button @onclick="UpdateAsync" type="button"
                                class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string UserId { get; set; }

    private readonly UpdateRequest _updateRequest = new UpdateRequest();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await LocalStorage.GetItemAsStringAsync("Token");
            var result = await ApiManager.GetAsync<GetByIdResponse>(GlobalVariable.ApiBaseAddress,
                $"/api/identity/user/GetById/{UserId}", token: token);
            if (result.ResultCode != 0)
            {
                Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
                return;
            }
            _updateRequest.UserId = result.User.UserId;
            _updateRequest.Username = result.User.Username;
            _updateRequest.Description = result.User.Description;
            _updateRequest.Email = result.User.Email;
            _updateRequest.LanguageId = result.User.Language.LanguageId;
            _updateRequest.Mobile = result.User.Mobile;
            _updateRequest.Status = result.User.Status;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_updateRequest.Username))
            {
                Toaster.ShowToast(ToastLevel.Error, "Enter your project 'UserName'.", "Validation Error");
                return;
            }
            var token = await LocalStorage.GetItemAsStringAsync("Token");
            var result = await ApiManager.PutAsync<BaseResponse, UpdateRequest>(GlobalVariable.ApiBaseAddress,
                "/api/identity/user/update", _updateRequest, token: token);
            if (result.ResultCode != 0)
            {
                Toaster.ShowToast(ToastLevel.Error, result.Message, "Server Error");
                return;
            }
            Toaster.ShowToast(ToastLevel.Info,
                "Successfully Updated.", "Update User");
            Navigator.NavigateTo("userlist");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message + "\n" + ex.StackTrace);
        }
    }
}
