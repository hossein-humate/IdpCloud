@page "/assignuserrole"
@using Humate.WASM.Dtos.ApiModel
@using Humate.WASM.Dtos.ApiModel.Role
@using Humate.WASM.Dtos.ApiModel.User
@using Humate.WASM.Dtos.ApiModel.User.Response
@using Humate.WASM.Dtos.ApiModel.UserRole.Request
@using Humate.WASM.Dtos.ApiModel.UserRole.Response
<!-- Content header -->
<div class="flex items-center justify-between px-4 py-4 border-b lg:py-6 dark:border-primary-darker">
    <h1 class="text-2xl font-semibold">Group/Role List</h1>
    <a href="/softwareList" class="px-4 py-2 text-sm text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">Back To All Projects</a>
</div>

<!-- Content -->
<div class="m-2">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-5 md:gap-8 m-2 mx-7">
        <div class="grid grid-cols-1">
            <div class="inline-flex">
                <label class="mr-2 flex items-center md:text-sm text-xs text-black dark:text-light font-semibold">Selected Role:</label>
                <select class="py-2 px-3 rounded-lg border-2 border-primary mt-1 focus:outline-none focus:ring-2
                    focus:ring-primary bg-white dark:bg-dark focus:border-transparent" @onchange="GetUserRolesAsync">
                    @foreach (var role in _roles)
                    {
                        if (role.IsDefault)
                        {
                            <option value="@role.RoleId" selected="selected">@role.Name</option>
                        }
                        else
                        {
                            <option value="@role.RoleId">@role.Name</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="grid grid-cols-1"></div>
        <div class="grid grid-cols-1">
            <button @onclick="SaveAsync" type="button"
                    class="inline-flex justify-center px-4 py-2 text-md text-white rounded-md bg-primary hover:bg-primary-dark focus:outline-none
           focus:ring focus:ring-primary focus:ring-offset-1 focus:ring-offset-white dark:focus:ring-offset-dark">
                @if (_loading)
                {
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                }
                Save
            </button>
        </div>
    </div>

    <DataGrid @ref="_dataGridUsers"
              HeaderColumns="@(new List<ColumnItem>
                       {
                           new ColumnItem
                           {
                               ParameterName = "UserId",
                               Invisible = false
                           },
                           new ColumnItem
                           {
                               ParameterName = "Username"
                           },
                           new ColumnItem
                           {
                               ParameterName = "Email"
                           },
                           new ColumnItem
                           {
                               ParameterName = "Mobile"
                           }
                       })"
              DataSource="@_users"
              EnableCheckBox="true"
              TItems="UserApiModel"></DataGrid>
</div>


@code {
    private bool _loading = false;
    private DataGrid<UserApiModel> _dataGridUsers = new DataGrid<UserApiModel>();
    private IList<UserApiModel> _users = new List<UserApiModel>();
    private IList<RoleApiModel> _roles = new List<RoleApiModel>();
    private readonly CreateRequest _createRequest = new CreateRequest();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ServiceHelper.ClearStack();
            ServiceHelper.CurrentProjectChangedAsync += LoadContentAsync;
            await LoadContentAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadContentAsync()
    {
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var rolesResult = await ApiManager.GetAsync<Dtos.ApiModel.Role.Response.GetBySoftwareIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/role/GetBySoftwareId/{await LocalStorage.GetItemAsStringAsync("CurrentProject")}", token);
        if (rolesResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, rolesResult.Message, "Server Error");
            return;
        }
        _roles = rolesResult.Roles.ToList();
        _createRequest.RoleId = _roles.FirstOrDefault(r => r.IsDefault).RoleId;
        var usersResult = await ApiManager.GetAsync<GetBySoftwareIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/user/GetBySoftwareId/{await LocalStorage.GetItemAsStringAsync("CurrentProject")}", token);
        if (usersResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, usersResult.Message, "Server Error");
            return;
        }
        _users = usersResult.Users.ToList();
        StateHasChanged();

        var userRolesResult = await ApiManager.GetAsync<GetByRoleIdResponse>(GlobalVariable.ApiBaseAddress,
        $"/api/identity/userRole/GetByRoleId/{_createRequest.RoleId}", token);
        if (userRolesResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, userRolesResult.Message, "Server Error");
            return;
        }
        foreach (var rowItem in _dataGridUsers.RowItems)
        {
            rowItem.Checked = userRolesResult.UserRoles.Any(i => i.UserId == rowItem["UserId"].Value.ToGuid());
        }
        Toaster.ShowToast(ToastLevel.Info,
            "Loading all data Roles/Users for selected project successfully completed.", "Select Project");
        StateHasChanged();
    }

    private async void GetUserRolesAsync(ChangeEventArgs eventArgs)
    {
        _createRequest.RoleId = eventArgs.Value.ToGuid();
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var userRolesResult = await ApiManager.GetAsync<GetByRoleIdResponse>(GlobalVariable.ApiBaseAddress,
            $"/api/identity/userRole/GetByRoleId/{_createRequest.RoleId}", token);
        if (userRolesResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, userRolesResult.Message, "Server Error");
            return;
        }
        foreach (var rowItem in _dataGridUsers.RowItems)
        {
            rowItem.Checked = userRolesResult.UserRoles.Any(i => i.UserId == rowItem["UserId"].Value.ToGuid());
        }
        Toaster.ShowToast(ToastLevel.Info,
            $"All Users in Role '{_roles.FirstOrDefault(r => r.RoleId == _createRequest.RoleId)?.Name}' has active checkboxes", "Load User");
        StateHasChanged();
    }

    private async void SaveAsync()
    {
        if (_loading) return;
        _loading = true;
        var token = await LocalStorage.GetItemAsStringAsync("Token");
        var roleResult = await ApiManager.PostAsync<BaseResponse, CreateRequest>(GlobalVariable.ApiBaseAddress,
            "/api/identity/userRole/Create", new CreateRequest
            {
                RoleId = _createRequest.RoleId,
                UserIds = _dataGridUsers.GetSelectedRowItems().Select(rowItem => rowItem["UserId"].Value.ToGuid())
            }, token);
        if (roleResult.ResultCode != 0)
        {
            Toaster.ShowToast(ToastLevel.Error, roleResult.Message, "Server Error");
            _loading = false;
            return;
        }
        Toaster.ShowToast(ToastLevel.Success,
            $"All selected Users are assigned to Role '{_roles.FirstOrDefault(r => r.RoleId == _createRequest.RoleId)?.Name}' Successfully", "Save Change");
        _loading = false;
        StateHasChanged();
    }
}
